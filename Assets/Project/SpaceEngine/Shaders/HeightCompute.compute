#pragma kernel CSMain

#define threadsPerGroup_X 32
#define threadsPerGroup_Y 32
#define nVerticesPerSide 128

#include "TCCommon.cginc"

struct GenerationConstants
{
    float scale;
    float noiseSeaLevel;
    float planetRadius;
	float spacing;
    float terrainMaxHeight;

    float3 cubeFaceEastDirection;
    float3 cubeFaceNorthDirection;
    float3 patchCubeCenter;
};

struct InputStruct
{
	float2 uv1;
	float2 uv2;
};

struct OutputStruct
{
	float noise;

	float3 patchCenter;

    float4 pos;
};

RWStructuredBuffer<GenerationConstants> terrainGenerationConstants;

RWStructuredBuffer<InputStruct> patchInput;
RWStructuredBuffer<OutputStruct> patchOutput;

[numthreads(threadsPerGroup_X, threadsPerGroup_Y, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int outBuffOffset = id.x + id.y * nVerticesPerSide;
	
	GenerationConstants constants = terrainGenerationConstants[0];

	float eastValue = (id.x - ((nVerticesPerSide - 1) / 2.0)) * constants.spacing;
	float northValue = (id.y - ((nVerticesPerSide - 1) / 2.0)) * constants.spacing;

	float3 cubeCoordEast = constants.cubeFaceEastDirection * eastValue;
    float3 cubeCoordNorth = constants.cubeFaceNorthDirection * northValue;
	float3 cubeCoord = cubeCoordEast + cubeCoordNorth + constants.patchCubeCenter;

	float3 patchCenter = normalize(constants.patchCubeCenter) * constants.planetRadius;
	float3 patchNormalizedCoord = normalize(cubeCoord);
	float3 patchCoord =  constants.planetRadius * patchNormalizedCoord;
	float3 patchCoordCentered = patchCoord - patchCenter;

    float3 sampleCoord = float3(patchInput[outBuffOffset].uv1, 0);

	float noise = HeightMapAsteroid(0.001 * patchCoord, 0.5, 0.75, 0.45, 0.25, 0.35);
	//float noise = HeightMapAsteroid(sampleCoord, 0.5, 0.75, 0.45, 0.25, 0.35);
	//float noise = Noise(sampleCoord);

    float height = ((noise * 2) - 1) * constants.terrainMaxHeight;
	//float height = (noise * 16);

	patchCoordCentered += patchNormalizedCoord * height;

	//float4 output = float4(constants.spacing, constants.spacing, constants.spacing, 1);

    float4 output = float4(patchCoordCentered.x, patchCoordCentered.y, patchCoordCentered.z, 0);

	//float4 output = float4(constants.spacing, height, 0, 0);

	patchOutput[outBuffOffset].patchCenter = patchCenter;
	patchOutput[outBuffOffset].noise = height;
    patchOutput[outBuffOffset].pos = output;
}