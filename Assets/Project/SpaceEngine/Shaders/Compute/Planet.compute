#define nVerticesPerSide 120
#define nVerticesPerSideWithBorder 128
#define nVerticesPerSideSub 240
#define nVerticesPerSideWithBorderSub 256

//#define defaultNoise

#include "Assets/Project/SpaceEngine/Shaders/Compute/Utils.cginc"
#include "Assets/Project/SpaceEngine/Shaders/TCCommon.cginc"

RWTexture2D<float4> Height;
RWTexture2D<float4> Normal;

RWStructuredBuffer<QuadGenerationConstants> quadGenerationConstants;

RWStructuredBuffer<OutputStruct> patchPreOutput;
RWStructuredBuffer<OutputStruct> patchOutput;
RWStructuredBuffer<OutputStruct> patchPreOutputSub;

float3 ScaledCoordinate(float3 coord)
{
	return 0.0001 * coord;
}

float NoiseFunction(float3 coord)
{
	float3 p = ScaledCoordinate(coord);
	
	#ifdef defaultNoise
	float noise = Fbm(p + Randomize, 2);
	#else
	//float noise = HeightMapAsteroid(p);
	//float noise = HeightMapTerra(p);
	float noise = HeightMapPlanet(p);
	#endif

	//float normalized = (noise + 1.0) / 2;

	return noise;
}

float4 ColorFunction(float3 coord, float height, float slope)
{
	float3 p = ScaledCoordinate(coord);

	#ifdef defaultNoise
	float4 color = float4(1.0, 1.0, 1.0, 1.0);
	#else
	//float4 colorMapColor = ColorMapAsteroid(p, height, slope);
	//float4 glowMapColor = GlowMapAsteroid(p, height, slope);
	//float4 color = colorMapColor + glowMapColor;
	//float4 color = ColorMapTerra(p, height, slope);
	float4 color = ColorMapPlanet(p, height, slope);
	#endif
	
	return color;
}

#pragma kernel HeightMain
[numthreads(32, 32, 1)]
void HeightMain (uint3 id : SV_DispatchThreadID)
{
	QuadGenerationConstants constants = quadGenerationConstants[0];

	int outBuffOffset = id.x + id.y * nVerticesPerSideWithBorder;

	float3 cubeCoord = CubeCoord(constants, nVerticesPerSideWithBorder, id, 7, constants.spacing);

	float3 patchCenter = normalize(constants.patchCubeCenter) * constants.planetRadius;
	float3 patchNormalizedCoord = normalize(cubeCoord);

	float3 patchCoord =  constants.planetRadius * patchNormalizedCoord;
	float3 patchCoordCentered = patchCoord - patchCenter;
	float3 patchCubeCoordCentered = patchNormalizedCoord;

	float noise = NoiseFunction(patchCoord);

	float height = noise * constants.terrainMaxHeight;

	patchCoordCentered += patchNormalizedCoord * height;
	patchCubeCoordCentered += patchNormalizedCoord * height;

	float4 output = float4(patchCoordCentered.xyz, 0.0);
	float4 cubeOutput = float4(patchCubeCoordCentered.xyz, 0.0);

	patchPreOutput[outBuffOffset].noise = noise;
	patchPreOutput[outBuffOffset].patchCenter = patchCenter;
	patchPreOutput[outBuffOffset].vcolor = float4(noise, noise, noise, 1.0);
	patchPreOutput[outBuffOffset].pos = output;
	patchPreOutput[outBuffOffset].cpos = float4(cubeCoord, 0);
}

#pragma kernel HeightSub
[numthreads(32, 32, 1)]
void HeightSub(uint3 id : SV_DispatchThreadID)
{
	QuadGenerationConstants constants = quadGenerationConstants[0];

	int outBuffOffset = id.x + id.y * nVerticesPerSideWithBorderSub;

	float3 cubeCoord = CubeCoord(constants, nVerticesPerSideWithBorderSub, id, 17, constants.spacingsub);

	float3 patchCenter = normalize(constants.patchCubeCenter) * constants.planetRadius;
	float3 patchNormalizedCoord = normalize(cubeCoord);

	float3 patchCoord =  constants.planetRadius * patchNormalizedCoord;
	float3 patchCoordCentered = patchCoord - patchCenter;
	float3 patchCubeCoordCentered = patchNormalizedCoord;

	float noise = NoiseFunction(patchCoord);

	float height = noise * constants.terrainMaxHeight;

	patchCoordCentered += patchNormalizedCoord * height;
	patchCubeCoordCentered += patchNormalizedCoord * height;

	float4 output = float4(patchCoordCentered.xyz, 0.0);
	float4 cubeOutput = float4(patchCubeCoordCentered.xyz, 0.0);

	patchPreOutputSub[outBuffOffset].noise = noise;
	patchPreOutputSub[outBuffOffset].patchCenter = patchCenter;
	patchPreOutputSub[outBuffOffset].vcolor = float4(noise, noise, noise, 1.0);
	patchPreOutputSub[outBuffOffset].pos = output;
	patchPreOutputSub[outBuffOffset].cpos = float4(cubeCoord, 0);
}

#pragma kernel TexturesSub
[numthreads(30, 30, 1)]
void TexturesSub(uint3 id : SV_DispatchThreadID)
{
	QuadGenerationConstants constants = quadGenerationConstants[0];

	int inBuffOffset = (id.x + 1) + (id.y + 1) * nVerticesPerSideWithBorderSub;
	int outBuffOffset = id.x + id.y * nVerticesPerSideSub;
	
	float noise = patchPreOutputSub[inBuffOffset].noise;
	float3 patchCenter = patchPreOutputSub[inBuffOffset].patchCenter;
	float4 pos = patchPreOutputSub[inBuffOffset].pos;
	float4 cpos = patchPreOutputSub[inBuffOffset].cpos;

	float normalStrength = 0.5 / ((constants.lodLevel / 20.0 + 1.0) * (constants.lodLevel / 20.0 + 1.0));
	
	float tl = patchPreOutputSub[(id.x + 0) + (id.y + 0) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float  l = patchPreOutputSub[(id.x + 0) + (id.y + 1) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float bl = patchPreOutputSub[(id.x + 0) + (id.y + 2) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float  t = patchPreOutputSub[(id.x + 1) + (id.y + 0) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float  b = patchPreOutputSub[(id.x + 1) + (id.y + 2) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float tr = patchPreOutputSub[(id.x + 2) + (id.y + 0) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float  r = patchPreOutputSub[(id.x + 2) + (id.y + 1) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float br = patchPreOutputSub[(id.x + 2) + (id.y + 2) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;

	float left  = patchPreOutputSub[(id.x + 0) + (id.y + 1) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float right = patchPreOutputSub[(id.x + 2) + (id.y + 1) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float up    = patchPreOutputSub[(id.x + 1) + (id.y + 0) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;
	float down  = patchPreOutputSub[(id.x + 1) + (id.y + 2) * nVerticesPerSideWithBorderSub].noise * constants.lodLevel;

	float xdeltaSlope = ((left - right) + 1.0) * 0.5;
	float ydeltaSlope = ((up - down) + 1.0) * 0.5;
	float zdeltaSlope = ((right - left) + 1.0) * 0.5;
	float wdeltaSlope = ((up - down) + 1.0) * 0.5;

	float3 xnormalSlope = float3(xdeltaSlope, ydeltaSlope, 1.0);
	float3 ynormalSlope = float3(ydeltaSlope, xdeltaSlope, 1.0);
	float3 znormalSlope = float3(zdeltaSlope, wdeltaSlope, 1.0);
	float3 wnormalSlope = float3(wdeltaSlope, zdeltaSlope, 1.0);

	float xdelta = tr + 2.0 * r + br - tl - 2.0 * l - bl;
	float ydelta = bl + 2.0 * b + br - tl - 2.0 * t - tr;

	float3 xnormal = normalize(float3(xdelta, ydelta, 2.0 * normalStrength));
	float3 ynormal = normalize(float3(ydelta, xdelta, 2.0 * normalStrength));

	float3 no = xnormalSlope;
	float3 ta = FindTangent(no, 0.01, float3(0.0, -1.0, 0.0));
	float3 bi = FindBiTangent(no, 0.01, float3(0.0, -1.0, 0.0));

	float3x3 tbn = float3x3(ta, bi, no);

	//float3 normal = mul(no, tbn);
	float3 normal = xnormalSlope;
	
	float xslope = 0.5 / max(dot(xnormalSlope, float3(0.0, 1.0, 0.0)), 0.001);
	float yslope = 0.5 / max(dot(ynormalSlope, float3(0.0, 1.0, 0.0)), 0.001);
	float zslope = 0.5 / max(dot(znormalSlope, float3(0.0, 1.0, 0.0)), 0.001);
	float wslope = 0.5 / max(dot(wnormalSlope, float3(0.0, 1.0, 0.0)), 0.001);

	float slope = min(min(xslope, yslope), min(zslope, wslope));
	
	float4 color = ColorFunction(cpos.xyz, noise, slope);
	float4 normalColor = float4(normal, slope);
	float4 heightColor = float4(color.xyz, noise);

	Normal[id.yx] = normalColor;
	Height[id.yx] = heightColor;
}

#pragma kernel Transfer
[numthreads(30, 30, 1)]
void Transfer(uint3 id : SV_DispatchThreadID)
{
	int inBuffOffset = (id.x + 1) + (id.y + 1) * nVerticesPerSideWithBorder;
	int outBuffOffset = id.x + id.y * nVerticesPerSide;

	patchOutput[outBuffOffset] = patchPreOutput[inBuffOffset];
}