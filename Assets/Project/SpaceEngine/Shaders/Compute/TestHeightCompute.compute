#define threadsPerGroup_X 32
#define threadsPerGroup_Y 32

#define nVerticesPerSide 128
//#define defaultNoise

#include "Assets/Project/SpaceEngine/Shaders/TCCommonAsteroid.cginc"

struct QuadGenerationConstants
{
    float planetRadius;
	float spacing;
    float terrainMaxHeight;

    float3 cubeFaceEastDirection;
    float3 cubeFaceNorthDirection;
    float3 patchCubeCenter;

	float3 topLeftCorner;
    float3 bottomRightCorner;
    float3 topRightCorner;
    float3 bottomLeftCorner;
    float3 middleNormalized;
};

struct OutputStruct
{
	float noise;
	
	float3 patchCenter;

	float4 vcolor;
    float4 pos;
	float4 cpos;
};

RWStructuredBuffer<QuadGenerationConstants> quadGenerationConstants;

RWStructuredBuffer<OutputStruct> patchPreOutput;
RWStructuredBuffer<OutputStruct> patchOutput;

float3 CubeCoord(QuadGenerationConstants constants, float VerticesPerSide, uint3 id)
{
	float eastValue = (id.x - ((VerticesPerSide - 1) / 2.0)) * constants.spacing;
	float northValue = (id.y - ((VerticesPerSide - 1) / 2.0)) * constants.spacing;

	float3 cubeCoordEast = constants.cubeFaceEastDirection * eastValue;
    float3 cubeCoordNorth = constants.cubeFaceNorthDirection * northValue;

	float3 cubeCoord = cubeCoordEast + cubeCoordNorth + constants.patchCubeCenter;

	return cubeCoord;
}

float NoiseFunction(float3 coord)
{
	//float noise = HeightMapAsteroid(0.001 * coord, mainFreq, montesFreq, hillsFreq, hillsMagn, hillsFraction, craterOctaves, craterSqrtDensity, craterFreq, craterMagn);
	//float noise = HeightMapTerra(0.001 * coord, venusFreq, mainFreq, hillsFreq, canyonsFreq, dunesFreq, montesFreq, riversFreq, venusMagn, dunesMagn, hillsMagn, canyonsMagn, montesMagn, riversMagn, seaLevel, montesSpiky, dunesFraction, hillsFraction, hills2Fraction, canyonsFraction, mareSqrtDensity, craterSqrtDensity, cracksOctaves, riversOctaves, volcanoOctaves, riversSin, cloudsStyle, latIceCaps, icecapHeight, erosion, craterOctaves, craterMagn, craterFreq, volcanoFreq, volcanoSqrtDensity, volcanoRadius, volcanoOctaves);
	
	#ifdef defaultNoise
	float noise = Noise(0.001 * coord);
	#else
	float noise = HeightMapAsteroid(0.001 * coord, mainFreq, montesFreq, hillsFreq, hillsMagn, hillsFraction, craterOctaves, craterSqrtDensity, craterFreq, craterMagn);
	//float noise = HeightMapTerra(0.001 * coord, venusFreq, mainFreq, hillsFreq, canyonsFreq, dunesFreq, montesFreq, riversFreq, venusMagn, dunesMagn, hillsMagn, canyonsMagn, montesMagn, riversMagn, seaLevel, montesSpiky, dunesFraction, hillsFraction, hills2Fraction, canyonsFraction, mareSqrtDensity, craterSqrtDensity, cracksOctaves, riversOctaves, volcanoOctaves, riversSin, cloudsStyle, latIceCaps, icecapHeight, erosion, craterOctaves, craterMagn, craterFreq, volcanoFreq, volcanoSqrtDensity, volcanoRadius, volcanoOctaves);
	#endif
	
	return noise;
}

float4 ColorFunction(float3 coord, float height, float slope)
{
	#ifdef defaultNoise
	float3 color = float3(0, 0, 0);
	#else
	float3 color = ColorMapAsteroid(coord, height, slope).xyz;
	//float3 color = ColorMapTerra(0.001 * coord, mainFreq, dunesFraction, hillsFraction, hills2Fraction, canyonsFraction).xyz;
	#endif
	
	return float4(color, 1);
}

#pragma kernel CSMainNoise
[numthreads(threadsPerGroup_X, threadsPerGroup_Y, 1)]
void CSMainNoise (uint3 id : SV_DispatchThreadID)
{
    int outBuffOffset = id.x + id.y * nVerticesPerSide;

	QuadGenerationConstants constants = quadGenerationConstants[0];

	float3 cubeCoord = CubeCoord(constants, nVerticesPerSide, id);

	float3 patchCenter = normalize(constants.patchCubeCenter) * constants.planetRadius;
	float3 patchNormalizedCoord = normalize(cubeCoord);
	
	float3 patchCoord =  constants.planetRadius * patchNormalizedCoord;
	float3 patchCoordCentered = patchCoord - patchCenter;
	
	float noise = NoiseFunction(patchCoord);
    float height = ((noise * 2) - 1) * constants.terrainMaxHeight;

	patchCoordCentered += patchNormalizedCoord * height;

    float4 output = float4(patchCoordCentered.xyz, 0);
	float4 cubeOutput = float4(patchCoordCentered.xyz, 0);

	patchPreOutput[outBuffOffset].noise = ((noise * 2) - 1);
	patchPreOutput[outBuffOffset].patchCenter = patchCenter;
	patchPreOutput[outBuffOffset].vcolor = float4(noise, noise, noise, 1);
    patchPreOutput[outBuffOffset].pos = output;
	patchPreOutput[outBuffOffset].cpos = cubeOutput;
}

RWTexture2D<float4> Height;
RWTexture2D<float4> Normal;

#pragma kernel CSTexturesMain
[numthreads(threadsPerGroup_X, threadsPerGroup_Y, 1)]
void CSTexturesMain (uint3 id : SV_DispatchThreadID)
{
	int outBuffOffset = id.x + id.y * nVerticesPerSide;

	QuadGenerationConstants constants = quadGenerationConstants[0];

	float noise = patchPreOutput[outBuffOffset].noise;
	float3 patchCenter = patchPreOutput[outBuffOffset].patchCenter;
	float4 pos = patchPreOutput[outBuffOffset].pos;
	float4 cpos = patchPreOutput[outBuffOffset].cpos;

	float left = patchPreOutput[(id.x - 1) + id.y * nVerticesPerSide].noise * 2;
	float right = patchPreOutput[(id.x + 1) + id.y * nVerticesPerSide].noise * 2;
	float up = patchPreOutput[id.x + (id.y - 1) * nVerticesPerSide].noise * 2;
	float down = patchPreOutput[id.x + (id.y + 1) * nVerticesPerSide].noise * 2;
	float xdelta = ((left - right) + 1) * 0.5;
	float ydelta = ((up - down) + 1) * 0.5;

	float3 normal = float3(xdelta, ydelta, 1);
	float slope = 0.5 / max(dot(normal, float3(0, 1, 0)), 0.001);
	float4 color = ColorFunction(pos.xyz, noise, slope);

	Normal[id.xy] = float4(normal, slope);	
	Height[id.xy] = float4(color.xyz, noise);

	patchOutput[outBuffOffset].noise = noise;
	patchOutput[outBuffOffset].patchCenter = patchCenter;
	patchOutput[outBuffOffset].vcolor = color;
    patchOutput[outBuffOffset].pos = pos;
	patchOutput[outBuffOffset].cpos = cpos;
}