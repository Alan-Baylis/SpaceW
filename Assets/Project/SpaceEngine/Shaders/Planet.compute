// Procedural planet generator.
// 
// Copyright (C) 2015-2017 Denis Ovchinnikov [zameran] 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
// Creation Date: Undefined
// Creation Time: Undefined
// Creator: zameran

#define VerticesPerSide 				quadGenerationConstants[0].meshSettings.x
#define VerticesPerSideWithBorder 		quadGenerationConstants[0].meshSettings.y
#define VerticesPerSideFull 			quadGenerationConstants[0].meshSettings.z
#define VerticesPerSideWithBorderFull 	quadGenerationConstants[0].meshSettings.w
#define BorderModMesh					quadGenerationConstants[0].borderMod.x
#define BorderModTexture				quadGenerationConstants[0].borderMod.y

//#define NOISE_USE_DEFAULT

#include "UnityCG.cginc"
#include "SpaceStuff.cginc"
#include "TCCommon.cginc"

RWTexture2D<float4> Height;
RWTexture2D<float4> Normal;

StructuredBuffer<QuadGenerationConstants> quadGenerationConstants;

RWStructuredBuffer<OutputStruct> patchPreOutput;
RWStructuredBuffer<OutputStruct> patchPreOutputSub;
RWStructuredBuffer<OutputStruct> patchOutput;

float3 ScaledCoordinate(float3 coord)
{
	return normalize(coord);
}

float NoiseFunction(float3 coord, float lodom)
{
	float3 scaledCoord = ScaledCoordinate(coord);
	
	#ifdef NOISE_USE_DEFAULT
	float noiseValue = Noise(scaledCoord * 16 + Randomize);
	#else
	//float noiseValue = HeightMapAsteroid(scaledCoord);
	float noiseValue = HeightMapTerra(scaledCoord);
	//float noiseValue = HeightMapPlanet(scaledCoord);
	//float noiseValue = HeightMapCloudsGasGiant(scaledCoord);
	#endif
	
	//float normalized = (noiseValue + 1.0) * 0.5;
	float normalized = noiseValue;

	return normalized;
}

float4 ColorFunction(float3 coord, float height, float slope)
{
	float3 scaledCoord = ScaledCoordinate(coord);

	#ifdef NOISE_USE_DEFAULT
	float4 color = float4(height, height, height, slope);
	#else
	//float4 color = ColorMapAsteroid(scaledCoord, height, slope) + GlowMapAsteroid(scaledCoord, height, slope);
	float4 color = ColorMapTerra(scaledCoord, height, slope) + GlowMapTerra(scaledCoord, height, slope);
	//float4 color = ColorMapPlanet(scaledCoord, height, slope);
	//float4 color = ColorMapCloudsGasGiant(scaledCoord, height, slope) + GlowMapCloudsGasGiant(scaledCoord, height, slope);
	//float4 color = float4(height, height, height, 1);
	#endif
	
	return color;
}

inline void Core(uint3 id, int size, int mod, QuadGenerationConstants constants, float spacing, RWStructuredBuffer<OutputStruct> buffer)
{
	int outBuffOffset = id.x + id.y * size;

	float3 cubeCoord = CubeCoord(constants, size, id, mod, spacing);
	float3 patchCenter = normalize(constants.patchCubeCenter) * constants.planetRadius;
	float3 patchNormalizedCoord = normalize(cubeCoord);
	float3 patchCoord =  constants.planetRadius * patchNormalizedCoord;
	float3 patchCoordCentered = patchCoord - patchCenter;
	float3 patchCubeCoordCentered = patchNormalizedCoord;

	float noiseValue = NoiseFunction(patchCoord, constants.lodOctaveModifier);
	float height = noiseValue * constants.terrainMaxHeight;

	patchCoordCentered += patchNormalizedCoord * height;
	patchCubeCoordCentered += patchNormalizedCoord * height;

	buffer[outBuffOffset].noise = noiseValue;
	buffer[outBuffOffset].patchCenter = patchCenter;
	buffer[outBuffOffset].position = float4(patchCoordCentered.xyz, 0.0);
	buffer[outBuffOffset].cubePosition = float4(patchCubeCoordCentered.xyz, 0.0);
}

#pragma kernel HeightMain
[numthreads(32, 32, 1)]
void HeightMain(uint3 id : SV_DispatchThreadID)
{
	Core(id, VerticesPerSideWithBorder, BorderModMesh, quadGenerationConstants[0], quadGenerationConstants[0].spacing, patchPreOutput);
}

#pragma kernel HeightSub
[numthreads(32, 32, 1)]
void HeightSub(uint3 id : SV_DispatchThreadID)
{
	Core(id, VerticesPerSideWithBorderFull, BorderModTexture, quadGenerationConstants[0], quadGenerationConstants[0].spacingFull, patchPreOutputSub);
}

#pragma kernel TexturesSub
[numthreads(30, 30, 1)]
void TexturesSub(uint3 id : SV_DispatchThreadID)
{
	QuadGenerationConstants constants = quadGenerationConstants[0];

	int inBuffOffset = (id.x + 1) + (id.y + 1) * VerticesPerSideWithBorderFull;
	
	float noiseValue = patchPreOutputSub[inBuffOffset].noise;
	float3 patchCenter = patchPreOutputSub[inBuffOffset].patchCenter;
	float4 position = patchPreOutputSub[inBuffOffset].position;
	float4 cubePosition = patchPreOutputSub[inBuffOffset].cubePosition;

	float slope = 0;
	float3 heightNormal = GetHeightNormal(constants, patchPreOutputSub, VerticesPerSideWithBorderFull, id, slope);
	
	//float slope = 0;
	//float3 sobelNormal = GetSobelNormal(constants, patchPreOutputSub, VerticesPerSideWithBorderFull, id);
	float3 positionNormal = GetHeightNormalFromPosition(constants, patchPreOutputSub, VerticesPerSideWithBorderFull, id);
	//float3 bumpNormal = GetHeightNormalFromBump(constants, patchPreOutputSub, VerticesPerSideWithBorderFull, id);
	//float3 packedNormal = GetPackedNormal(constants, patchPreOutputSub, VerticesPerSideWithBorderFull, id);

	float3 normal = positionNormal;

	float4 color = ColorFunction(cubePosition.xyz, noiseValue, slope);
	float4 normalColor = float4(normal, slope);
	float4 heightColor = float4(color.xyz, noiseValue);

	Normal[id.yx] = normalColor;
	Height[id.yx] = heightColor;
}

#pragma kernel Transfer
[numthreads(30, 30, 1)]
void Transfer(uint3 id : SV_DispatchThreadID)
{
	int inBuffOffset = (id.x + 1) + (id.y + 1) * VerticesPerSideWithBorder;
	int outBuffOffset = id.x + id.y * VerticesPerSide;

	patchOutput[outBuffOffset] = patchPreOutput[inBuffOffset];
}